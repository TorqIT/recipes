{
    "manifests": {
        "torq/pimcore-docker": {
            "manifest": {
                "copy-from-recipe": {
                    ".docker/": ".docker/"
                }
            },
            "files": {
                ".docker/Dockerfile": {
                    "contents": [
                        "# syntax=docker/dockerfile:1",
                        "",
                        "FROM pimcore/pimcore:php8.3-v3 AS base",
                        "RUN set -eux; \\",
                        "    apt-get update -y; \\",
                        "    apt-get install -y --no-install-recommends autoconf make g++ unixodbc-dev cron procps iputils-ping vim supervisor netcat-traditional default-mysql-client; \\",
                        "    rm -rf /var/lib/apt/lists/*; \\",
                        "    usermod -u 1000 www-data; \\",
                        "    groupmod -g 1000 www-data;",
                        "# We copy in the composer files and download dependencies, then in a separate set of statements below copy in the full",
                        "# source directory and run a full composer install. This will take advantage of Docker-build caching when the composer",
                        "# dependencies do not change.",
                        "COPY --chown=www-data:www-data /composer.* /var/www/html",
                        "COPY /.docker/composer-install-dependencies.sh /composer-install-dependencies.sh",
                        "RUN /composer-install-dependencies.sh",
                        "COPY --chown=www-data:www-data / /var/www/html",
                        "RUN --mount=type=secret,id=kernel-secret,uid=1000 \\",
                        "    set -eux; \\",
                        "    cd /var/www/html; \\",
                        "    runuser -u www-data -- php /usr/local/bin/composer install; \\",
                        "    runuser -u www-data -- /var/www/html/bin/console pimcore:build:classes; \\",
                        "    runuser -u www-data -- /var/www/html/bin/console cache:warmup",
                        "",
                        "FROM base AS init",
                        "# TODO allow for custom bundles to be passed via args?",
                        "COPY /.docker/init/init.sh /init.sh",
                        "CMD [ \"/init.sh\" ]",
                        "",
                        "FROM base AS php",
                        "RUN set -eux; \\",
                        "    apt-get update -y; \\",
                        "    apt-get install -y --no-install-recommends nginx; \\",
                        "    rm -rf /var/lib/apt/lists/*;",
                        "COPY /.docker/php/php.ini /usr/local/etc/php/conf.d/docker-pimcore-php.ini",
                        "COPY /.docker/php/nginx.conf /etc/nginx/sites-available/default",
                        "COPY /.docker/php/supervisord.conf /etc/supervisor/supervisord.conf",
                        "CMD [ \"/usr/bin/supervisord\", \"-c\", \"/etc/supervisor/supervisord.conf\" ]",
                        "",
                        "FROM base AS supervisord",
                        "COPY --from=pimcore/pimcore:php8.3-supervisord-v3 /var/run /var/run",
                        "COPY --from=pimcore/pimcore:php8.3-supervisord-v3 /usr/sbin/cron /usr/sbin/cron",
                        "COPY --from=pimcore/pimcore:php8.3-supervisord-v3 /etc/supervisor/supervisord.conf /etc/supervisor/supervisord.conf",
                        "COPY /.docker/supervisord/supervisord.conf /etc/supervisor/conf.d/pimcore.conf",
                        "CMD [ \"/usr/bin/supervisord\", \"-c\", \"/etc/supervisor/conf.d/pimcore.conf\" ]",
                        "",
                        "FROM base AS php-debug",
                        "COPY --from=pimcore/pimcore:php8.3-debug-v3 /usr/local/bin/entrypoint.sh /usr/local/bin/entrypoint.sh",
                        "RUN pecl install xdebug; \\",
                        "    docker-php-ext-enable xdebug;",
                        "ENV PHP_IDE_CONFIG serverName=localhost",
                        "COPY /.docker/php-debug/xdebug.conf /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini",
                        "ENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]",
                        "CMD [\"php-fpm\"]"
                    ],
                    "executable": false
                },
                ".docker/composer-install-dependencies.sh": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "echo Configuring Composer...",
                        "runuser -u www-data -- mkdir -p /var/www/.config/composer && mkdir -p /var/www/.cache/composer",
                        "chown -R /var/www",
                        "",
                        "echo Installing Composer packages...",
                        "cd /var/www/html && runuser -u www-data -- php -d memory_limit=-1 -d xdebug.remote_enable=0 /usr/local/bin/composer install --prefer-dist --no-scripts"
                    ],
                    "executable": false
                },
                ".docker/php-debug/nginx-debug.conf": {
                    "contents": [
                        "",
                        "# mime types are already covered in nginx.conf",
                        "#include mime.types;",
                        "",
                        "upstream php-pimcore10 {",
                        "    server php:9000;",
                        "}",
                        "",
                        "upstream php-pimcore10-debug {",
                        "    server php-debug:9000;",
                        "}",
                        "",
                        "map $args $static_page_root {",
                        "    default                                 /var/tmp/pages;",
                        "    \"~*(^|&)pimcore_editmode=true(&|$)\"     /var/nonexistent;",
                        "    \"~*(^|&)pimcore_preview=true(&|$)\"      /var/nonexistent;",
                        "    \"~*(^|&)pimcore_version=[^&]+(&|$)\"     /var/nonexistent;",
                        "}",
                        "",
                        "map $uri $static_page_uri {",
                        "    default                                 $uri;",
                        "    \"/\"                                     /%home;",
                        "}",
                        "",
                        "server {",
                        "    listen [::]:80 default_server;",
                        "    listen 80 default_server;",
                        "",
                        "    #server_name pimcore.localhost;",
                        "",
                        "    root /var/www/html/public;",
                        "    index index.php;",
                        "",
                        "    # Filesize depending on your data",
                        "    client_max_body_size 100m;",
                        "",
                        "    # It is recommended to seclude logs per virtual host",
                        "    #access_log  /var/log/access.log;",
                        "    #error_log   /var/log/error.log error;",
                        "",
                        "    # Protected Assets",
                        "    #",
                        "    ### 1. Option - Restricting access to certain assets completely",
                        "    #",
                        "    # location ~ ^/protected/.* {",
                        "    #   return 403;",
                        "    # }",
                        "    # location ~ ^/var/.*/protected(.*) {",
                        "    #   return 403;",
                        "    # }",
                        "    #",
                        "    # location ~ ^/cache-buster\\-[\\d]+/protected(.*) {",
                        "    #   return 403;",
                        "    # }",
                        "    #",
                        "    ### 2. Option - Checking permissions before delivery",
                        "    #",
                        "    # rewrite ^(/protected/.*) /index.php$is_args$args last;",
                        "    #",
                        "    # location ~ ^/var/.*/protected(.*) {",
                        "    #   return 403;",
                        "    # }",
                        "    #",
                        "    # location ~ ^/cache-buster\\-[\\d]+/protected(.*) {",
                        "    #   return 403;",
                        "    # }",
                        "",
                        "    # Pimcore Head-Link Cache-Busting",
                        "    rewrite ^/cache-buster-(?:\\d+)/(.*) /$1 last;",
                        "",
                        "    # Stay secure",
                        "    #",
                        "    # a) don't allow PHP in folders allowing file uploads",
                        "    location ~* /var/assets/.*\\.php(/|$) {",
                        "        return 404;",
                        "    }",
                        "",
                        "    # b) Prevent clients from accessing hidden files (starting with a dot)",
                        "    # Access to `/.well-known/` is allowed.",
                        "    # https://www.mnot.net/blog/2010/04/07/well-known",
                        "    # https://tools.ietf.org/html/rfc5785",
                        "    location ~* /\\.(?!well-known/) {",
                        "        deny all;",
                        "        log_not_found off;",
                        "        access_log off;",
                        "    }",
                        "",
                        "    # c) Prevent clients from accessing to backup/config/source files",
                        "    location ~* (?:\\.(?:bak|conf(ig)?|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {",
                        "        deny all;",
                        "    }",
                        "",
                        "    # Some Admin Modules need this:",
                        "    # Server Info, Opcache",
                        "    location ~* ^/admin/external {",
                        "        rewrite .* /index.php$is_args$args last;",
                        "    }",
                        "",
                        "    # Thumbnails",
                        "    location ~* .*/(image|video)-thumb__\\d+__.* {",
                        "        try_files /var/tmp/thumbnails$uri /index.php;",
                        "        expires 2w;",
                        "        access_log off;",
                        "        add_header Cache-Control \"public\";",
                        "    }",
                        "",
                        "    # Assets",
                        "    # Still use a whitelist approach to prevent each and every missing asset to go through the PHP Engine.",
                        "    location ~* ^(?!/admin|/asset/webdav)(.+?)\\.((?:css|js)(?:\\.map)?|jpe?g|gif|png|svgz?|eps|exe|gz|zip|mp\\d|m4a|ogg|ogv|webp|webm|pdf|docx?|xlsx?|pptx?)$ {",
                        "        try_files /var/assets$uri $uri =404;",
                        "        expires 2w;",
                        "        access_log off;",
                        "        log_not_found off;",
                        "        add_header Cache-Control \"public\";",
                        "    }",
                        "",
                        "    location / {",
                        "        error_page 404 /meta/404;",
                        "        try_files $static_page_root$static_page_uri.html $uri /index.php$is_args$args;",
                        "    }",
                        "",
                        "    # Use this location when the installer has to be run",
                        "    # location ~ /(index|install)\\.php(/|$) {",
                        "    #",
                        "    # Use this after initial install is done:",
                        "    location ~ ^/index\\.php(/|$) {",
                        "        send_timeout 1800;",
                        "        fastcgi_read_timeout 1800;",
                        "        # regex to split $uri to $fastcgi_script_name and $fastcgi_path_info",
                        "        fastcgi_split_path_info ^(.+\\.php)(/.+)$;",
                        "        # Check that the PHP script exists before passing it",
                        "        #try_files $fastcgi_script_name =404;",
                        "        # include fastcgi.conf if needed",
                        "        include fastcgi_params;",
                        "        # Bypass the fact that try_files resets $fastcgi_path_info",
                        "        # see: http://trac.nginx.org/nginx/ticket/321",
                        "        set $path_info $fastcgi_path_info;",
                        "        fastcgi_param PATH_INFO $path_info;",
                        "",
                        "        # Activate these, if using Symlinks and opcache",
                        "        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;",
                        "        fastcgi_param DOCUMENT_ROOT $realpath_root;",
                        "",
                        "        # Mitigate https://httpoxy.org/ vulnerabilities",
                        "        fastcgi_param HTTP_PROXY \"\";",
                        "",
                        "        # If Xdebug session is requested, pass it to the Xdebug enabled container",
                        "        if ($http_cookie ~* \"XDEBUG_SESSION\") {",
                        "            fastcgi_pass php-pimcore10-debug;",
                        "        }",
                        "",
                        "        fastcgi_pass php-pimcore10;",
                        "        # Prevents URIs that include the front controller. This will 404:",
                        "        # http://domain.tld/index.php/some-path",
                        "        # Remove the internal directive to allow URIs like this",
                        "        internal;",
                        "    }",
                        "",
                        "    # PHP-FPM Status and Ping",
                        "    location /fpm- {",
                        "        access_log off;",
                        "        include fastcgi_params;",
                        "        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;",
                        "        location /fpm-status {",
                        "            allow 127.0.0.1;",
                        "            # add additional IP's or Ranges",
                        "            deny all;",
                        "            fastcgi_pass php-pimcore10;",
                        "        }",
                        "        location /fpm-ping {",
                        "            fastcgi_pass php-pimcore10;",
                        "        }",
                        "    }",
                        "    # nginx Status",
                        "    # see: https://nginx.org/en/docs/http/ngx_http_stub_status_module.html",
                        "    location /nginx-status {",
                        "        allow 127.0.0.1;",
                        "        deny all;",
                        "        access_log off;",
                        "        stub_status;",
                        "    }",
                        "}"
                    ],
                    "executable": false
                },
                ".docker/php-debug/xdebug.conf": {
                    "contents": [
                        "zend_extension=xdebug",
                        "",
                        "[xdebug]",
                        "xdebug.mode=debug,develop,profile",
                        "xdebug.output_dir = /var/www/html/var/log/xdebug.log",
                        "xdebug.client_host=host.docker.internal",
                        "xdebug.client_port=9003",
                        "xdebug.cli_color=1",
                        "xdebug.start_with_request=trigger",
                        "xdebug.log_level=3",
                        "xdebug.log=/var/www/html/var/log/xdebug.log",
                        "xdebug.discover_client_host=1",
                        "xdebug.max_nesting_level=256"
                    ],
                    "executable": false
                },
                ".docker/php/nginx.conf": {
                    "contents": [
                        "",
                        "# mime types are already covered in nginx.conf",
                        "#include mime.types;",
                        "",
                        "map $args $static_page_root {",
                        "    default                                 /var/tmp/pages;",
                        "    \"~*(^|&)pimcore_editmode=true(&|$)\"     /var/nonexistent;",
                        "    \"~*(^|&)pimcore_preview=true(&|$)\"      /var/nonexistent;",
                        "    \"~*(^|&)pimcore_version=[^&]+(&|$)\"     /var/nonexistent;",
                        "}",
                        "",
                        "map $uri $static_page_uri {",
                        "    default                                 $uri;",
                        "    \"/\"                                     /%home;",
                        "}",
                        "",
                        "server {",
                        "    listen [::]:80 default_server;",
                        "    listen 80 default_server;",
                        "    ",
                        "    #server_name pimcore.localhost;",
                        "    ",
                        "    root /var/www/html/public;",
                        "    index index.php;",
                        "",
                        "    # Filesize depending on your data",
                        "    client_max_body_size 100m;",
                        "",
                        "    # It is recommended to seclude logs per virtual host",
                        "    #access_log  /var/log/access.log;",
                        "    #error_log   /var/log/error.log error;",
                        "",
                        "    # Protected Assets",
                        "    #",
                        "    ### 1. Option - Restricting access to certain assets completely",
                        "    #",
                        "    # location ~ ^/protected/.* {",
                        "    #   return 403;",
                        "    # }",
                        "    # location ~ ^/var/.*/protected(.*) {",
                        "    #   return 403;",
                        "    # }",
                        "    #",
                        "    # location ~ ^/cache-buster\\-[\\d]+/protected(.*) {",
                        "    #   return 403;",
                        "    # }",
                        "    #",
                        "    ### 2. Option - Checking permissions before delivery",
                        "    #",
                        "    # rewrite ^(/protected/.*) /index.php$is_args$args last;",
                        "    #",
                        "    # rewrite ^(/cache-buster-(?:\\d+)/protected(?:.*)) /index.php$is_args$args last;",
                        "    #",
                        "    # location ~ ^/var/.*/protected(.*) {",
                        "    #   return 403;",
                        "    # }",
                        "    #",
                        "    # location ~ ^/cache-buster\\-[\\d]+/protected(.*) {",
                        "    #   return 403;",
                        "    # }",
                        "",
                        "    # Pimcore Head-Link Cache-Busting",
                        "    rewrite ^/cache-buster-(?:\\d+)/(.*) /$1 last;",
                        "",
                        "    # Stay secure",
                        "    #",
                        "    # a) don't allow PHP in folders allowing file uploads",
                        "    location ~* /var/assets/.*\\.php(/|$) {",
                        "        return 404;",
                        "    }",
                        "",
                        "    # b) Prevent clients from accessing hidden files (starting with a dot)",
                        "    # Access to `/.well-known/` is allowed.",
                        "    # https://www.mnot.net/blog/2010/04/07/well-known",
                        "    # https://tools.ietf.org/html/rfc5785",
                        "    location ~* /\\.(?!well-known/) {",
                        "        deny all;",
                        "        log_not_found off;",
                        "        access_log off;",
                        "    }",
                        "",
                        "    # c) Prevent clients from accessing to backup/config/source files",
                        "    location ~* (?:\\.(?:bak|conf(ig)?|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {",
                        "        deny all;",
                        "    }",
                        "",
                        "    # Some Admin Modules need this:",
                        "    # Server Info, Opcache",
                        "    location ~* ^/admin/external {",
                        "        rewrite .* /index.php$is_args$args last;",
                        "    }",
                        "",
                        "    # Thumbnails",
                        "    location ~* .*/(image|video)-thumb__\\d+__.* {",
                        "        try_files /var/tmp/thumbnails$uri /index.php;",
                        "        expires 2w;",
                        "        access_log off;",
                        "        add_header Cache-Control \"public\";",
                        "    }",
                        "",
                        "    # Assets",
                        "    # Still use a whitelist approach to prevent each and every missing asset to go through the PHP Engine.",
                        "    location ~* ^(?!/admin|/asset/webdav|/studio/api)(.+?)\\.((?:css|js)(?:\\.map)?|jpe?g|gif|png|svgz?|eps|exe|gz|json|zip|mp\\d|m4a|ogg|ogv|webp|webm|pdf|csv|docx?|xlsx?|pptx?)$ {",
                        "        try_files /var/assets$uri $uri =404;",
                        "        expires 2w;",
                        "        access_log off;",
                        "        log_not_found off;",
                        "        add_header Cache-Control \"public\";",
                        "    }",
                        "",
                        "    location / {",
                        "        error_page 404 /meta/404;",
                        "        try_files $static_page_root$static_page_uri.html $uri /index.php$is_args$args;",
                        "    }",
                        "",
                        "    # Use this location when the installer has to be run",
                        "    # location ~ /(index|install)\\.php(/|$) {",
                        "    #",
                        "    # Use this after initial install is done:",
                        "    location ~ ^/index\\.php(/|$) {",
                        "        send_timeout 1800;",
                        "        fastcgi_read_timeout 1800;",
                        "        # regex to split $uri to $fastcgi_script_name and $fastcgi_path_info",
                        "        fastcgi_split_path_info ^(.+\\.php)(/.+)$;",
                        "        # Check that the PHP script exists before passing it",
                        "        #try_files $fastcgi_script_name =404;",
                        "        # include fastcgi.conf if needed",
                        "        include fastcgi_params;",
                        "        # Bypass the fact that try_files resets $fastcgi_path_info",
                        "        # see: http://trac.nginx.org/nginx/ticket/321",
                        "        set $path_info $fastcgi_path_info;",
                        "        fastcgi_param PATH_INFO $path_info;",
                        "",
                        "        # Activate these, if using Symlinks and opcache",
                        "        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;",
                        "        fastcgi_param DOCUMENT_ROOT $realpath_root;",
                        "",
                        "        # Mitigate https://httpoxy.org/ vulnerabilities",
                        "        fastcgi_param HTTP_PROXY \"\";",
                        "",
                        "        fastcgi_pass 127.0.0.1:9000;",
                        "        # Prevents URIs that include the front controller. This will 404:",
                        "        # http://domain.tld/index.php/some-path",
                        "        # Remove the internal directive to allow URIs like this",
                        "        internal;",
                        "    }",
                        "",
                        "    # PHP-FPM Status and Ping",
                        "    location /fpm- {",
                        "        access_log off;",
                        "        include fastcgi_params;",
                        "        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;",
                        "        location /fpm-status {",
                        "            allow 127.0.0.1;",
                        "            # add additional IP's or Ranges",
                        "            deny all;",
                        "            fastcgi_pass 127.0.0.1:9000;",
                        "        }",
                        "        location /fpm-ping {",
                        "            fastcgi_pass 127.0.0.1:9000;",
                        "        }",
                        "    }",
                        "    # nginx Status",
                        "    # see: https://nginx.org/en/docs/http/ngx_http_stub_status_module.html",
                        "    location /nginx-status {",
                        "        allow 127.0.0.1;",
                        "        deny all;",
                        "        access_log off;",
                        "        stub_status;",
                        "    }",
                        "}"
                    ],
                    "executable": false
                },
                ".docker/php/php.ini": {
                    "contents": [
                        "session.save_handler=redis",
                        "session.save_path=\"tcp://${REDIS_HOST}:6379?database=${REDIS_SESSION_DB}\""
                    ],
                    "executable": false
                },
                ".docker/php/supervisord.conf": {
                    "contents": [
                        "[supervisord]",
                        "nodaemon=true",
                        "logfile=/dev/null",
                        "logfile_maxbytes=0",
                        "user=root",
                        "",
                        "[program:nginx]",
                        "command=/usr/sbin/nginx -g \"daemon off;\"",
                        "autostart=true",
                        "autorestart=true",
                        "startretries=5",
                        "numprocs=1",
                        "startsecs=0",
                        "process_name=%(program_name)s_%(process_num)02d",
                        "stdout_logfile=/dev/fd/1",
                        "stdout_logfile_maxbytes=0",
                        "redirect_stderr=true",
                        "",
                        "[program:php-fpm]",
                        "command=php-fpm",
                        "autostart=true",
                        "autorestart=true",
                        "stdout_logfile=/dev/fd/1",
                        "stdout_logfile_maxbytes=0",
                        "redirect_stderr=true"
                    ],
                    "executable": false
                },
                ".github/workflows/build-docker-images.yaml": {
                    "contents": [
                        "name: Ensure Docker images can be built",
                        "",
                        "on:",
                        "  pull_request:",
                        "    types: [opened, reopened, synchronize]",
                        "",
                        "concurrency:",
                        "  group: ci__${{ github.sha }}",
                        "  cancel-in-progress: true",
                        "",
                        "jobs:",
                        "  build-images:",
                        "    name: Build Docker images",
                        "    uses: TorqIT/pimcore-github-actions-workflows/.github/workflows/docker-builds.yml@v7",
                        "    permissions:",
                        "      contents: read",
                        "      actions: read",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "4531a3595555c788fe0e6c9cc8df6321901fe658"
        }
    }
}
